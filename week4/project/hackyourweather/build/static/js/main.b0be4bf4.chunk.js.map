{"version":3,"sources":["components/RemoveCity.js","components/CityBox.js","components/ListOfCities.js","components/SearchBar.js","components/CityPage.js","App.js","reportWebVitals.js","index.js"],"names":["RemoveCity","removeCity","cityId","className","onClick","CityBox","city","country","weatherMain","weatherDesc","maxTemp","minTemp","lat","lon","to","pathname","state","ListOfCities","cityWeather","map","id","name","sys","weather","main","description","temp_max","temp_min","coord","SearchBar","useState","cityName","setCityName","setCityWeather","isLoading","setIsLoading","isError","setIsError","notFound","setNotFound","submitForm","e","a","preventDefault","length","fetch","process","newWeatherData","json","newCityWeather","find","cod","status","message","charAt","toUpperCase","slice","onSubmit","type","value","placeholder","onChange","target","filter","CityPage","fiveDaysWeather","setFiveDaysWeather","location","useLocation","history","useHistory","fetchFiveDaysWeatherData","fiveDaysWeatherData","fiveDaysWeatherJSON","setTimeout","goBack","useEffect","weatherList","list","AreaChart","width","height","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Area","stroke","fill","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAWeA,EARI,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,OAC9B,OACI,wBAAQC,UAAU,0BAA0BC,QAAS,kBAAMH,EAAWC,IAAtE,SACI,cAAC,IAAD,OCuCGG,EAzCC,SAAC,GAWV,IAVHH,EAUE,EAVFA,OACAI,EASE,EATFA,KACAC,EAQE,EARFA,QACAC,EAOE,EAPFA,YACAC,EAME,EANFA,YACAC,EAKE,EALFA,QACAC,EAIE,EAJFA,QACAC,EAGE,EAHFA,IACAC,EAEE,EAFFA,IACAZ,EACE,EADFA,WAEA,OACI,mCACI,sBAAKE,UAAU,WAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,cAAC,IAAD,CAAMW,GAAI,CACNC,SAAS,IAAD,OAAMb,GACdc,MAAO,CACHV,OACAC,YAJR,SAOI,qBAAIJ,UAAU,wBAAd,UAAuCG,EAAvC,KAA+CC,OAEnD,sBAAKJ,UAAU,yBAAf,UACI,6BAAKK,IACL,4BAAIC,OAER,2CAAcC,KACd,2CAAcC,KACd,2CAAcC,EAAd,KAAqBC,QAEzB,8BACI,cAAC,EAAD,CAAYZ,WAAYA,EAAYC,OAAQA,YCXjDe,EAxBM,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,YAAajB,EAAgB,EAAhBA,WAChC,OACI,mCACKiB,EAAYC,KAAI,SAAAb,GACb,OACI,cAAC,EAAD,CAEIJ,OAAQI,EAAKc,GACbd,KAAMA,EAAKe,KACXd,QAASD,EAAKgB,IAAIf,QAClBC,YAAaF,EAAKiB,QAAQ,GAAGC,KAC7Bf,YAAaH,EAAKiB,QAAQ,GAAGE,YAC7Bf,QAASJ,EAAKkB,KAAKE,SACnBf,QAASL,EAAKkB,KAAKG,SACnBf,IAAKN,EAAKsB,MAAMhB,IAChBC,IAAKP,EAAKsB,MAAMf,IAChBZ,WAAYA,GAVPK,EAAKc,UCmGnBS,EAzGG,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACbC,EADa,KACHC,EADG,OAEkBF,mBAAS,IAF3B,mBAEbZ,EAFa,KAEAe,EAFA,OAGcH,oBAAS,GAHvB,mBAGbI,EAHa,KAGFC,EAHE,OAIUL,oBAAS,GAJnB,mBAIbM,EAJa,KAIJC,EAJI,OAKYP,mBAAS,IALrB,mBAKbQ,EALa,KAKHC,EALG,KAadC,EAAU,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,yDACfD,EAAEE,mBAGEZ,EAASa,QAAU,GAJR,wDAQfP,GAAW,GACXF,GAAa,GATE,kBAYkBU,MAAM,uEAAD,OACsBd,EADtB,+BAlB1Be,mCAkB0B,mBAZvB,cAYLC,EAZK,iBAekBA,EAAeC,OAfjC,QAeLC,EAfK,OAkBV/B,EAAYgC,MAAK,SAAA5C,GAAI,OAAIA,EAAKc,KAAO6B,EAAe7B,OAA8B,MAAvB6B,EAAeE,IAIvElB,EAAe,YAAIf,IAFnBe,EAAe,CAACgB,GAAF,mBAAqB/B,KAKb,MAA1B6B,EAAeK,OACXb,EAAYU,EAAeI,QAAQC,OAAO,GAAGC,cAAgBN,EAAeI,QAAQG,MAAM,IAE1FjB,EAAY,IA5BL,kDA8BXF,GAAW,GA9BA,QAiCfF,GAAa,GAEbH,EAAY,IAnCG,0DAAH,sDA8ChB,OACI,qCACI,sBAAK7B,UAAU,aAAf,UACI,uBAAMsD,SAAUjB,EAAhB,UACI,uBACIrC,UAAU,oBACVuD,KAAK,OACLC,MAAO5B,EACP6B,YAAY,cACZC,SA3DA,SAAApB,GAChBT,EAAYS,EAAEqB,OAAOH,UA4DT,uBACIxD,UAAU,qBACVuD,KAAK,SACLC,MAAM,cAGd,gCAE+B,IAAvBzC,EAAY0B,SACA,IAAZR,GACa,KAAbE,GACA,sDAGY,IAAZF,GACA,8DAGa,KAAbE,GACA,+BAAKA,EAAL,QAGc,IAAdJ,GACA,qBAAK/B,UAAU,iBAKvBe,EAAY0B,OAAS,GACrB,cAAC,EAAD,CAAc1B,YAAaA,EAAajB,WAhDjC,SAAAC,GACf+B,EAAef,EAAY6C,QAAO,SAAAzD,GAC9B,GAAGA,EAAKc,KAAOlB,EACX,OAAOI,a,qDC+BR0D,EApFE,WAAO,IAAD,EAC2BlC,mBAAS,IADpC,mBACZmC,EADY,KACKC,EADL,OAEepC,oBAAS,GAFxB,mBAEZI,EAFY,KAEDC,EAFC,OAGWL,oBAAS,GAHpB,mBAGZM,EAHY,KAGHC,EAHG,OAIaP,mBAAS,IAJtB,mBAIZQ,EAJY,KAIFC,EAJE,KAOb4B,EAAWC,cACXrC,EAAWoC,EAASnD,MAAMV,KAC1BC,EAAU4D,EAASnD,MAAMT,QAEzB8D,EAAUC,cAIVC,EAAwB,uCAAG,8BAAA7B,EAAA,6DAC7BL,GAAW,GACXF,GAAa,GAFgB,kBAKSU,MAAM,wEAAD,OACkBd,EADlB,+BAP/Be,mCAO+B,mBALd,cAKnB0B,EALmB,gBAQSA,EAAoBxB,OAR7B,OAQnByB,EARmB,OAUU,MAA/BD,EAAoBpB,QAAgBb,EAAY,gBAErB,MAA/BiC,EAAoBpB,OAEhBsB,YAAW,WACPL,EAAQM,WACT,KAEHT,EAAmBO,GAlBE,kDAoBzBpC,GAAW,GAEXqC,YAAW,WACPL,EAAQM,WACT,KAxBsB,QA2B7BxC,GAAa,GA3BgB,0DAAH,qDA8B9ByC,qBAAU,WACNL,MACD,IAEH,IAAMM,EAAcZ,EAAgBa,KAEpC,OACI,sBAAK3E,UAAU,YAAf,UACI,gDACA,+BAAK4B,EAAL,KAAiBxB,MACF,IAAd2B,GAAsB,qBAAK/B,UAAU,WACxB,KAAbmC,GAAmB,gGACP,IAAZF,GAAoB,2FACrB,eAAC2C,EAAA,EAAD,CACI5E,UAAU,mBACV6E,MAAO,IACPC,OAAQ,IACRC,KAAML,EACNM,OAAQ,CACJC,IAAK,GACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,GAThB,UAYI,cAACC,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,WACf,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAMpC,KAAK,WAAWiC,QAAQ,YAAYI,OAAO,UAAUC,KAAK,eAGpE,wBAAQ7F,UAAU,qBAAqBC,QAAS,kBAAMiE,EAAQM,UAA9D,yBChEGsB,MAZf,WACE,OACE,cAAC,IAAD,UACE,sBAAK9F,UAAU,MAAf,UACE,oBAAIA,UAAU,cAAd,qBACA,cAAC,IAAD,CAAO+F,KAAK,IAAIC,OAAK,EAACC,UAAWvE,IACjC,cAAC,IAAD,CAAOqE,KAAK,WAAWE,UAAWpC,UCC3BqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b0be4bf4.chunk.js","sourcesContent":["import React from 'react';\nimport { CgCloseO } from 'react-icons/cg';\n\nconst RemoveCity = ({ removeCity, cityId }) => {\n    return (\n        <button className=\"city-box__remove-button\" onClick={() => removeCity(cityId)} >\n            <CgCloseO />\n        </button>\n    );\n};\n\nexport default RemoveCity;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport RemoveCity from './RemoveCity';\n\nconst CityBox = ({\n    cityId,\n    city,\n    country, \n    weatherMain, \n    weatherDesc, \n    maxTemp, \n    minTemp, \n    lat,\n    lon,\n    removeCity\n}) => {\n    return (\n        <>\n            <div className=\"city-box\">\n                <div className=\"city-box__info\">\n                    <Link to={{ \n                        pathname: `/${cityId}`,\n                        state: {\n                            city, \n                            country\n                        }\n                    }} >\n                        <h2 className=\"city-box__info-header\">{city}, {country}</h2>\n                    </Link>\n                    <div className=\"city-box__info-weather\">\n                        <h3>{weatherMain}</h3>\n                        <p>{weatherDesc}</p>\n                    </div>\n                    <p>max temp: {maxTemp}</p>\n                    <p>min temp: {minTemp}</p>\n                    <p>location: {lat}, {lon}</p>\n                </div>\n                <div>\n                    <RemoveCity removeCity={removeCity} cityId={cityId} />\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default CityBox;\n","import React from 'react';\nimport CityBox from './CityBox';\n\nconst ListOfCities = ({cityWeather, removeCity}) => {\n    return (\n        <>\n            {cityWeather.map(city => {\n                return (\n                    <CityBox \n                        key={city.id}\n                        cityId={city.id}\n                        city={city.name} \n                        country={city.sys.country}\n                        weatherMain={city.weather[0].main}\n                        weatherDesc={city.weather[0].description}\n                        maxTemp={city.main.temp_max}\n                        minTemp={city.main.temp_min}\n                        lat={city.coord.lat}\n                        lon={city.coord.lon}\n                        removeCity={removeCity}\n                    />\n                );\n            })}\n        </>\n    );\n};\n\nexport default ListOfCities;","import React, { useState } from 'react';\nimport ListOfCities from './ListOfCities';\n\nconst SearchBar = () => {\n    const [cityName, setCityName] = useState(\"\");\n    const [cityWeather, setCityWeather] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n    const [notFound, setNotFound] = useState(\"\");\n\n    const API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\n\n    const handleInput = e => {\n        setCityName(e.target.value);\n    };\n\n    const submitForm = async (e) => {\n        e.preventDefault();\n\n        // Check the input field whether it has at least 1 character\n        if (cityName.length <= 1) {\n            return;\n        };\n\n        setIsError(false);\n        setIsLoading(true);\n\n        try {\n            const newWeatherData = await fetch(`\n                https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=${API_KEY}\n            `);\n            const newCityWeather = await newWeatherData.json();\n\n            // Check for avoiding duplication of a city and the success of the fetching\n            !cityWeather.find(city => city.id === newCityWeather.id) && newCityWeather.cod === 200 ?\n                // Keep the previous cities to show\n                setCityWeather([newCityWeather, ...cityWeather]) \n                :\n                setCityWeather([...cityWeather]);\n\n            // Check for \"not found\" response\n            newWeatherData.status === 404 ? \n                setNotFound(newCityWeather.message.charAt(0).toUpperCase() + newCityWeather.message.slice(1))\n                : \n                setNotFound(\"\");\n        } catch (error) {\n            setIsError(true);\n        };\n\n        setIsLoading(false);\n\n        setCityName(\"\");\n    };\n\n    const removeCity = cityId => {\n        setCityWeather(cityWeather.filter(city => {\n            if(city.id !== cityId) {\n                return city;\n            };\n        }));\n    };\n    \n    return (\n        <>\n            <div className=\"search-bar\">\n                <form onSubmit={submitForm}>\n                    <input \n                        className=\"search-bar__input\" \n                        type=\"text\" \n                        value={cityName}\n                        placeholder=\"Search City\" \n                        onChange={handleInput} \n                    />\n                    <input \n                        className=\"search-bar__submit\" \n                        type=\"submit\" \n                        value=\"Search\" \n                    />\n                </form>\n                <div>\n                    {\n                        cityWeather.length === 0 &&\n                        isError === false && \n                        notFound === \"\" && \n                        <h3>No city search yet!</h3>\n                    }\n                    {\n                        isError === true && \n                        <h3>An error occured, try again!</h3>\n                    }\n                    {\n                        notFound !== \"\" && \n                        <h3>{notFound}!</h3>\n                    }\n                    {\n                        isLoading === true && \n                        <div className=\"loader\"></div>\n                    }\n                </div>\n            </div>\n            {\n                cityWeather.length > 0 && \n                <ListOfCities cityWeather={cityWeather} removeCity={removeCity} />\n            }\n        </>\n    );\n};\n\nexport default SearchBar;","import React, { useState, useEffect } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\n\nconst CityPage = () => {\n    const [fiveDaysWeather, setFiveDaysWeather] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n    const [notFound, setNotFound] = useState(\"\");\n\n    // Getting cityName and country from location\n    const location = useLocation();\n    const cityName = location.state.city;\n    const country = location.state.country;\n\n    const history = useHistory();\n    \n    const API_KEY = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\n    \n    const fetchFiveDaysWeatherData = async () => {\n        setIsError(false);\n        setIsLoading(true);\n    \n        try {\n            const fiveDaysWeatherData = await fetch(`\n                https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&units=metric&appid=${API_KEY}\n            `);\n            const fiveDaysWeatherJSON = await fiveDaysWeatherData.json();\n\n            if (fiveDaysWeatherData.status === 404) setNotFound(\"Not found!!!\");\n\n            fiveDaysWeatherData.status === 404 ?\n                // If no response, automatically go back to previous page\n                setTimeout(() => {\n                    history.goBack();\n                }, 4000)\n                :\n                setFiveDaysWeather(fiveDaysWeatherJSON);\n        } catch (error) {\n            setIsError(true);\n            // If error, automatically go back to previous page\n            setTimeout(() => {\n                history.goBack();\n            }, 4000);\n        };\n\n        setIsLoading(false);\n    };\n    \n    useEffect(() => {\n        fetchFiveDaysWeatherData();\n    }, []);\n    \n    const weatherList = fiveDaysWeather.list;\n    \n    return (\n        <div className=\"city-page\">\n            <h2>5 Day Forecast</h2>\n            <h2>{cityName}, {country}</h2>\n            {isLoading === true && <div className=\"loader\"></div>}\n            {notFound !== \"\" && <div>Something went wrong, you'll be directed to the home page...</div>}\n            {isError === true && <div>An error occured, you'll be directed to the home page...</div>}\n            <AreaChart\n                className=\"city-page__chart\"\n                width={1000}\n                height={400}\n                data={weatherList}\n                margin={{\n                    top: 10,\n                    right: 30,\n                    left: 0,\n                    bottom: 0,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"dt_txt\" />\n                <YAxis />\n                <Tooltip />\n                <Area type=\"monotone\" dataKey=\"main.temp\" stroke=\"#8884d8\" fill=\"#feb47b\" />\n            </AreaChart>\n\n            <button className=\"city-page__go-back\" onClick={() => history.goBack()}>\n                Go Back\n            </button>\n        </div>\n    );\n};\n\nexport default CityPage;","import './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport SearchBar from './components/SearchBar';\nimport CityPage from './components/CityPage';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"app\">\n        <h1 className=\"main-header\">Weather</h1>\n        <Route path=\"/\" exact component={SearchBar} />\n        <Route path=\"/:cityId\" component={CityPage} />\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}