{"version":3,"sources":["1-NewFriend.js","2-DogGallery.js","3-RandomJoke.js","App.js","reportWebVitals.js","index.js"],"names":["FriendProfile","friend","className","name","first","last","location","street","number","city","state","postcode","country","email","Button","onClick","Friend","useState","setFriend","isLoading","setIsLoading","setIsError","getFriend","a","fetch","fetchResponse","json","fetchJSON","results","friendData","Object","keys","length","DogPhoto","url","src","alt","DogGallery","dogPhotos","setDogPhotos","getDogPhoto","message","imgUrl","map","dog","index","Joke","joke","setup","punchline","RandomJoke","setJoke","useEffect","newJokeData","fetchData","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1e874eb.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst Friend = () => {\n    const [friend, setFriend] = useState({});\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n\n    // Async function for fetching data\n    const getFriend = async () => {\n        setIsError(false);\n        setIsLoading(true);\n\n        const endPoint = \"https://www.randomuser.me/api?results=1\";\n\n        try {\n            const fetchResponse = await fetch(endPoint);\n            const fetchJSON = await fetchResponse.json();\n            const friendData = await fetchJSON.results[0];\n\n            setFriend(friendData);\n        } catch (error) {\n            setIsError(true);\n        };\n        setIsLoading(false);\n    };\n    \n    return (\n        <div>\n            <Button onClick={getFriend} />\n            {/* Loading spinner */}\n            {isLoading === true && <div className=\"loader\"></div>}\n            {/* Checking if the friend object empty or not */}\n            {Object.keys(friend).length !== 0 && <FriendProfile friend={friend} />}\n        </div>\n    );\n};\n\nconst FriendProfile = ({ friend }) => {\n    return (\n        <ul className=\"friendInfo\">\n            <li>\n                First Name:<br/>\n                <em>{friend.name.first}</em>\n            </li>\n            <li>\n                Last Name:<br/>\n                <em>{friend.name.last}</em>\n            </li>\n            <li>\n                Address:<br/>\n                <em>\n                {friend.location.street.number} {friend.location.street.name}<br/>\n                {friend.location.city} {friend.location.state} {friend.location.postcode}\n                </em>\n            </li>\n            <li>\n                Country:<br/>\n                <em>{friend.location.country}</em>\n            </li>\n            <li>\n                Email:<br/>\n                <em>{friend.email}</em>\n            </li>\n        </ul>\n    );\n};\n\nconst Button = ({ onClick }) => {\n    return (\n        <button className=\"button\" onClick={onClick}>Get a friend!</button>\n    );\n};\n\nexport default Friend;","import React, { useState } from 'react';\n\nconst DogGallery = () => {\n    const [dogPhotos, setDogPhotos] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n\n    // Async function for fetching data\n    const getDogPhoto = async () => {\n        setIsError(false);\n        setIsLoading(true);\n        \n        const endPoint = \"https://dog.ceo/api/breeds/image/random\";\n\n        try {\n            const fetchResponse = await fetch(endPoint);\n            const fetchJSON = await fetchResponse.json();\n            const imgUrl = await fetchJSON.message;\n            \n            setDogPhotos([...dogPhotos, imgUrl]);\n        } catch (error) {\n            setIsError(true);\n        }\n\n        setIsLoading(false);\n    };\n    \n    return (\n        <div>\n            <div>\n                <Button onClick={getDogPhoto} />\n            </div>\n            {/* Loading spinner */}\n            {isLoading === true && <div className=\"loader\"></div>}\n            {/* Checking the dogPhotos state for if it's empty or not */}\n            {dogPhotos.length === 0 ? \n                <p>Get your first dog by clicking the button!</p> \n                :\n                dogPhotos.map((dog, index) => <DogPhoto url={dog} key={index}/>)\n            }\n        </div>\n    );\n};\n\nconst DogPhoto = ({ url }) => {\n    return (\n        <img className=\"dogPhoto\" src={url} alt={url}/>\n    );\n};\n\nconst Button = ({ onClick }) => {\n    return (\n        <button className=\"button\" onClick={onClick}>Get a dog!</button>\n    );\n};\n\nexport default DogGallery;","import React, { useState, useEffect } from 'react';\n\nconst RandomJoke = () => {\n    const [joke, setJoke] = useState({});\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setIsError(false);\n            setIsLoading(true);\n            \n            const endPoint = \"https://official-joke-api.appspot.com/random_joke\";\n\n            try {\n                const fetchResponse = await fetch(endPoint);\n                const newJokeData = await fetchResponse.json();\n                \n                setJoke(newJokeData);\n            } catch (error) {\n                setIsError(true);\n            }\n            \n            setIsLoading(false);\n        };\n        \n        fetchData();\n    }, []);\n\n    return (\n        <div>\n            <Joke joke={joke} />\n            {/* Loading spinner */}\n            {isLoading === true && <div className=\"loader\"></div>}\n        </div>\n    );\n};\n\nconst Joke = ({ joke }) => {\n    return (\n        <div>\n            <p>{joke.setup}</p>\n            <p>{joke.punchline}</p>\n        </div>\n    );\n};\n\nexport default RandomJoke;","import './App.css';\nimport Friend from './1-NewFriend';\nimport DogGallery from './2-DogGallery';\nimport RandomJoke from './3-RandomJoke';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h3 className=\"exHeader\">Exercise-1</h3>\n      <Friend />\n      <h3 className=\"exHeader\">Exercise-2</h3>\n      <DogGallery />\n      <h3 className=\"exHeader\">Exercise-3</h3>\n      <RandomJoke />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}